# ~requires tmux
# Turn off the delay that tmux has to check for escaped key strokes such
# as the arrow keys.  This will make tmux shortcuts with arrow keys not
# work (so "prefix arrow" will work, but "Ctrl-arrow" will not).  If I
# decide I want to have tmux shortcuts with arrow keys, escape-time
# could be set to 50 (which is 10x faster than the default).
# EDIT: Updated to 50 because I encountered problems on Windows Terminal
# using an escape time of 0
set -sg escape-time 50

# The repeat-time "feature" tends to annoy me much more than it is a
# convenience, so I disable it.
set -g repeat-time 0

# My keyboard isn't 0-indexed, so switching between 0-indexed windows
# and panes is awkward.  Sadly, there is no way to do this for session
# indices.
set -g base-index 1
set -g pane-base-index 1

# Make C-Space be a command prefix but allow the default as well
set -g prefix2 C-Space

# C-Space C-Space sends a literal C-Space
bind C-Space send-prefix -2

# Use 256 color mode (from the TMUX FAQ)
set -g default-terminal screen-256color

# Don't try to set the clipboard because my terminal doesn't actually
# support OSC 52 and I don't want to mess around with terminfo to say
# that properly.
set -g set-clipboard off

# Alternative bindings for splitting/creating windows, with the
# difference that they inherit the PWD of the current pane.
bind h split-window -h -c '#{pane_current_path}'
bind v split-window -v -c '#{pane_current_path}'
bind + new-window -c '#{pane_current_path}'

# Allow copy-mode-vi's Escape to escape out of copy-mode entirely if no
# selection is present.
bind -T copy-mode-vi Escape \
    if -Ft= '#{selection_present}' \
        'send -X clear-selection' \
        'send -X cancel'

# In copy-mode-vi, use y to copy the selection but NOT cancel
bind -T copy-mode-vi y send -X copy-selection

# In all copy-modes, use C-c as another way to yank (by default it is
# used as cancel, but I prefer escape for that)
bind -T copy-mode C-c send -X copy-selection
bind -T copy-mode-vi C-c send -X copy-selection

# Alternative paste binding to match C-c
bind C-v paste-buffer

# Alternative binding for choosing a paste buffer
bind b choose-buffer -Z

# Add information to the title
# TODO: can we customize the title?  (I think it's a bit ugly)
set -g set-titles on

# Turn on mouse bindings
set -g mouse on

# Get rid of the default binding that copies the selection and exits
# copy mode when you stop dragging.
unbind -T copy-mode MouseDragEnd1Pane
unbind -T copy-mode-vi MouseDragEnd1Pane

# Click to close copy mode if nothing is selected, otherwise just clear
# the selection.  This unfortunately makes double/triple click bindings
# basically unusable, but there doesn't seem to be a good way around
# that without breaking something worse.
bind -T copy-mode MouseUp1Pane \
    select-pane \; \
    if -Ft= '#{selection_present}' \
        'send -X clear-selection' \
        'send -X cancel'
bind -T copy-mode-vi MouseUp1Pane \
    select-pane \; \
    if -Ft= '#{selection_present}' \
        'send -X clear-selection' \
        'send -X cancel'

## Stolen/reformatted from https://github.com/choco/dotFiles
# Check if copy-mode or any mouse flags, then send mouse events
# or check if we're in alternate screen end send navigation keys (up, down)
bind -n WheelUpPane \
    if -Ft= '#{?pane_in_mode,1,#{mouse_any_flag}}' \
        'send -Mt=' \
        'if -Ft= "#{alternate_on}" \
            "send -t= -N 3 Up" \
            "copy-mode -et="'
bind -n WheelDownPane \
    if -Ft= '#{?pane_in_mode,1,#{mouse_any_flag}}' \
        'send -Mt=' \
        'if -Ft= "#{alternate_on}" \
            "send -t= -N 3 Down" \
            "send -Mt="'
